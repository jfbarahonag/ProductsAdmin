@using BlazorApp.Models
@using BlazorApp.Services

@inject IProductService productService;
@inject IJSRuntime jsruntime;
@inject ILogger<ProductCardComponent> _logger;
@inject NavigationManager navigationManager;

@if (Product is not null)
{
  <div class="card">
    <img class="card-img-top" src="@Product.Images[0]" alt="product-@Product.Id" loading="lazy" width="270" />
    <div class="card-body">
      <h4><b>@Product.Title</b></h4>
      <p>@Product.Price?.ToString("C")</p>
    </div>
    <div class="card-footer">
      <button title="Delete" class="btn btn-danger btn-delete" 
        onclick="@(() => DeleteProduct(Product))">
        Delete
      </button>
      <button title="Edit" class="btn btn-warning" 
        onclick="@(() => navigationManager.NavigateTo($"/products/{Product.Id}/edit"))">
        Edit
      </button>
    </div>
  </div>
}

@code
{
  [Parameter]
  [EditorRequired]
  public Product? Product { get; set; }

  private async Task DeleteProduct(Product product)
  {
    if (product is null) return;

    if (!await jsruntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove {product.Title}?"))
      return;
    
    var response = await productService.Remove(product.Id);
    _logger.LogInformation($"Product {product.Title} {(response == true ? "":"NOT")} Removed");
  }
}