@using BlazorApp.Services
@using BlazorApp.Models

@page "/add-product"
@inject IProductService productService;
@inject ICategoryService categoryService;
@inject NavigationManager navigationManager;
@inject IToastService toastService;

<PageTitle>Add new product</PageTitle>
<ModuleTitle Title="Add new product" />

<button
  class="btn btn-dark" 
  @onclick="@(() => navigationManager.NavigateTo("/products"))">
  Go to products
</button>
<EditForm Model="@Product" OnSubmit="@Save">
  <div class="row">
    <div class="col form-group">
      <label for="title" class="col-form-label">Title</label>
      <InputText id="title" @bind-Value="Product.Title" required class="form-control" />
    </div>
  </div>
  <div class="row">
    <div class="col form-group">
      <label for="category" class="col-form-label">Category</label>
      <InputSelect id="category" @bind-Value="Product.CategoryId" class="form-control">
        <option disabled hidden value="0">Select category</option>
        @foreach(var c in categries)
        {
          <option value="@c.Id">@c.Name</option>
        }
      </InputSelect>
    </div>
  </div>
  <div class="row">
    <div class="col form-group">
      <label for="price" class="col-form-label">Price</label>
      <InputNumber min="1" id="price" @bind-Value="Product.Price" required class="form-control" />
    </div>
  </div>
  <div class="row">
    <div class="col form-group">
      <label for="image" class="col-form-label">Image (URL)</label>
      <InputText id="image" @bind-Value="Product.Image" required class="form-control" />
    </div>
  </div>
  <div class="row">
    <div class="col form-group">
      <label for="description" class="col-form-label">Description</label>
      <InputTextArea id="description" @bind-Value="Product.Description" required class="form-control" />
    </div>
  </div>
  <hr />
  <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code
{
  private Product Product = new();
  private List<Category> categries = [];

  protected override async Task OnInitializedAsync()
  {
    categries = await categoryService.Get();
  }

  private async Task Save()
  {
    if (
      string.IsNullOrEmpty(Product.Image) ||
      Product.CategoryId <= 0
    ) return;

    Product.Images = [Product.Image];
        
    var response = await productService.Add(Product);

    var message = response is not null
        ? $"Product {Product.Title} successfully added."
        : $"Product {Product.Title} could not be added.";
    
    toastService.ShowToast(
      response is not null ? ToastLevel.Success : ToastLevel.Error,
      message
    );

    navigationManager.NavigateTo("/products");
  }
}